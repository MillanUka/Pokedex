{"version":3,"sources":["Utils.js","Components/Types.js","Components/Abilities.js","Components/PokemonCard.js","Components/PokemonList.js","Components/Stats.js","Components/PokemonDetails.js","Components/AbilityDetails.js","App.js","serviceWorker.js","index.js"],"names":["POKE_API","getData","url","setFunction","a","fetch","then","response","status","alert","json","data","catch","err","console","log","removePunctuation","originalString","replaceChar","replace","searchPokemon","query","originalArr","size","arr","i","length","push","slice","splitArray","results","filter","item","name","includes","Types","props","types","map","index","type","typeName","toUpperCase","substring","Fragment","key","className","style","fontSize","Abilities","abilities","setSelectedAbility","ability","abilityName","to","onClick","PokemonCard","setSelectedPokemon","useState","pokemon","setPokemon","useEffect","id","src","sprites","other","front_default","alt","width","height","weight","PokemonList","pokemonList","Stats","stats","stat","statName","base_stat","PokemonDetails","useRef","current","JSON","parse","localStorage","getItem","setItem","stringify","abilityData","setAbilityData","flavor_text_entries","flavor_text","App","setPokemonList","selectedPokemon","selectedAbility","searchQuery","setSearchQuery","pokemonArr","setPokemonArr","setIndex","isSearching","setIsSearching","path","onChange","e","target","value","tempPokemonArr","undefined","pokemonData","previous","next","disabled","Array","newPokemonList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.371a3f4c.chunk.js","sourcesContent":["import data from \"./data/pokemon-list.json\";\r\n\r\nexport const POKE_API = \"https://pokeapi.co/api/v2/\";\r\nexport const SEARCH_LIMIT = 20;\r\nexport async function getData(url, setFunction) {\r\n  await fetch(url)\r\n    .then(async function (response) {\r\n      if (response.status !== 200) {\r\n        alert(\r\n          \"Looks like there was a problem. Status Code: \" + response.status\r\n        );\r\n        return;\r\n      }\r\n\r\n      await response.json().then(function (data) {\r\n        setFunction(data);\r\n      });\r\n    })\r\n    .catch(function (err) {\r\n      console.log(err)\r\n      console.log(url)\r\n      console.log(\"There was a problem\");\r\n    });\r\n    \r\n}\r\n\r\nexport async function getPokemonData(url) {\r\n  return await fetch(url)\r\n    .then(async function (response) {\r\n      if (response.status !== 200) {\r\n        alert(\r\n          \"Looks like there was a problem. Status Code: \" + response.status\r\n        );\r\n        return;\r\n      }\r\n\r\n      return await response.json().then(function (data) {\r\n        return data;\r\n      });\r\n    })\r\n    .catch(function (err) {\r\n      console.log(\"There was a problem\");\r\n    });\r\n}\r\nexport function removePunctuation(originalString, replaceChar) {\r\n  return originalString.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, replaceChar);\r\n}\r\n\r\nexport function splitArray(originalArr, size) {\r\n  var arr = [];\r\n  for (var i = 0; i < originalArr.length; i += size) {\r\n    arr.push(originalArr.slice(i, i + size));\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport function searchPokemon(query) {\r\n  return splitArray(\r\n    data.results.filter((item) => {\r\n      return item.name.includes(query);\r\n    }),\r\n    SEARCH_LIMIT\r\n  );\r\n}\r\n","import React from \"react\";\r\nexport default function Types(props) {\r\n  const { types } = props;\r\n  return (\r\n    <div>\r\n      {types.map(({ type }, index) => {\r\n        var typeName = type.name[0].toUpperCase() + type.name.substring(1);\r\n        return (\r\n          <React.Fragment key={index}>\r\n            <div className={typeName} style={{ fontSize: \"22px\" }}>\r\n              {typeName}\r\n            </div>\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { removePunctuation } from \"../Utils\";\r\nexport default function Abilities(props) {\r\n  const { abilities, setSelectedAbility } = props;\r\n  return (\r\n    <div>\r\n      {abilities.map(({ ability }, index) => {\r\n        var abilityName = removePunctuation(ability.name[0].toUpperCase() + ability.name.substring(1), \" \");\r\n        return (\r\n          <React.Fragment key={index}>\r\n            <Link to={\"/Pokedex/ability/\" + ability.name} onClick={() => {\r\n                setSelectedAbility(ability);\r\n            }}>\r\n              <div className=\"ability\">{abilityName}</div>\r\n            </Link>\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import { getData, removePunctuation } from \"../Utils\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./PokemonCard.css\";\r\nimport Types from \"./Types\";\r\nimport Abilities from \"./Abilities\";\r\nexport default function PokemonCard(props) {\r\n  const { setSelectedPokemon, setSelectedAbility } = props;\r\n  const [pokemon, setPokemon] = useState(null);\r\n  useEffect(() => {\r\n    getData(props.pokemon.url, setPokemon);\r\n  });\r\n  return (\r\n    <React.Fragment>\r\n      {!pokemon ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        <div className=\"card\">\r\n          <Link\r\n            to={\"/Pokedex/details/\" + pokemon.id}\r\n            onClick={() => {\r\n              setSelectedPokemon(pokemon);\r\n            }}\r\n          >\r\n            <h1>\r\n              {\" \"}\r\n              #\r\n              {pokemon.id +\r\n                \" \" +\r\n                removePunctuation(\r\n                  pokemon.name[0].toUpperCase() + pokemon.name.substring(1),\r\n                  \" \"\r\n                )}\r\n            </h1>\r\n            <div className=\"portraitImage\">\r\n              <img\r\n                src={(!pokemon.sprites.other[\"official-artwork\"].front_default ?  pokemon.sprites.front_default : pokemon.sprites.other[\"official-artwork\"].front_default)}\r\n                alt={\"An image of \" + pokemon.name}\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n              />{\" \"}\r\n            </div>\r\n          </Link>\r\n          <Types types={pokemon.types} />\r\n          <Abilities\r\n            abilities={pokemon.abilities}\r\n            setSelectedAbility={setSelectedAbility}\r\n          />\r\n          <div className={\"metrics\"}>\r\n            Height: {pokemon.height / 10}m\r\n            <br />\r\n            Weight: {pokemon.weight / 10}kg\r\n          </div>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PokemonCard from \"./PokemonCard\";\r\nimport \"../index.css\";\r\nexport function PokemonList(props) {\r\n  const { pokemonList, setSelectedPokemon, setSelectedAbility } = props;\r\n  var results = pokemonList.results;\r\n  console.log(pokemonList)\r\n  if (results != null) {\r\n    return results.map(({ pokemon }, index) => {\r\n      return (\r\n        <React.Fragment key={results[index].name}>\r\n          <PokemonCard pokemon={results[index]} setSelectedPokemon={setSelectedPokemon} setSelectedAbility={setSelectedAbility}/>\r\n        </React.Fragment>\r\n      );\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { removePunctuation } from \"../Utils\";\r\nexport default function Stats(props) {\r\n  const { stats } = props;\r\n  return (\r\n    <div>\r\n      {stats.map(({ stat }, index) => {\r\n        var statName = removePunctuation(stat.name[0].toUpperCase() + stat.name.substring(1), \" \");\r\n        return (\r\n          <React.Fragment key={index}>\r\n            <div style={{ fontSize: \"22px\" }}>\r\n              {statName}: {stats[index].base_stat}\r\n            </div>\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport Types from \"./Types\";\r\nimport \"./PokemonDetails.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Stats from \"./Stats\";\r\nimport { removePunctuation } from \"../Utils\";\r\nexport default function PokemonDetails(props) {\r\n  const pokemonData = useRef(props.pokemon);\r\n  var pokemon = pokemonData.current;\r\n  if (pokemon === null) {\r\n    pokemon = JSON.parse(localStorage.getItem(\"pokemon\"));\r\n  } else {\r\n    localStorage.setItem(\"pokemon\", JSON.stringify(pokemon));\r\n  }\r\n  return (\r\n    <div className={\"content\"}>\r\n      <Link to={\"/Pokedex\"}>\r\n        <div className={\"back\"}>Back</div>\r\n      </Link>\r\n      <div className={\"pokemonDetails\"}>\r\n        <h1>\r\n          {\" \"}\r\n          #\r\n          {pokemon.id +\r\n            \" \" +\r\n            removePunctuation(\r\n              pokemon.name[0].toUpperCase() + pokemon.name.substring(1),\r\n              \" \"\r\n            )}\r\n        </h1>\r\n        <div className=\"portraitImage\">\r\n          <img\r\n            src={pokemon.sprites.other[\"official-artwork\"].front_default}\r\n            alt={\"An image of \" + pokemon.name}\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n          />{\" \"}\r\n        </div>\r\n        <br />\r\n        <Types types={pokemon.types} />\r\n        <br />\r\n        <div className={\"details\"}>\r\n          Height: {pokemon.height / 10}m<br />\r\n          Weight: {pokemon.weight / 10}kg\r\n          <br />\r\n        </div>\r\n        <div className={\"stats\"}>\r\n          <Stats stats={pokemon.stats} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./AbilityDetails.css\";\r\nimport { getData, removePunctuation } from \"../Utils\";\r\nexport default function Abilities(props) {\r\n  const ability = useRef(props.ability);\r\n  const [abilityData, setAbilityData] = useState(null);\r\n  useEffect(() => {\r\n    var data = ability;\r\n    if (ability.current === null) {\r\n      data = JSON.parse(localStorage.getItem(\"ability\"));\r\n      console.log(data);\r\n    }\r\n    getData(data.current.url, setAbilityData);\r\n  }, []);\r\n\r\n  if (abilityData === null) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    localStorage.setItem(\"ability\", JSON.stringify(ability));\r\n    var abilityName;\r\n    return (\r\n      <div className={\"content\"}>\r\n        <Link to={\"/Pokedex\"}>\r\n          <div className={\"back\"}>Back</div>\r\n        </Link>\r\n        <div className={\"abilityDetails\"}>\r\n          {!abilityData ? (\r\n            <div>Loading...</div>\r\n          ) : (\r\n            <div>\r\n              <h1>\r\n                {\r\n                  (abilityName = removePunctuation(\r\n                    abilityData.name[0].toUpperCase() +\r\n                      abilityData.name.substring(1),\r\n                    \" \"\r\n                  ))\r\n                }\r\n              </h1>\r\n              {abilityData.flavor_text_entries[0].flavor_text}\r\n              <div className={\"pokemonList\"}>\r\n                <h3>Pokemon with {abilityName}</h3>\r\n                <table>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Number</th>\r\n                      <th>Name</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {abilityData.pokemon.map(({ pokemon }, index) => {\r\n                      return (\r\n                        <React.Fragment key={abilityData.pokemon[index].name}>\r\n                          <tr>\r\n                            <td>{index + 1}</td>\r\n                            <td>\r\n                              {removePunctuation(\r\n                                abilityData.pokemon[\r\n                                  index\r\n                                ].pokemon.name[0].toUpperCase() +\r\n                                  abilityData.pokemon[\r\n                                    index\r\n                                  ].pokemon.name.substring(1),\r\n                                \" \"\r\n                              )}\r\n                            </td>\r\n                          </tr>\r\n                        </React.Fragment>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n                <br />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { POKE_API, getData, searchPokemon } from \"./Utils\";\r\nimport { PokemonList } from \"./Components/PokemonList\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport PokemonDetails from \"./Components/PokemonDetails\";\r\nimport AbilitiesDetails from \"./Components/AbilityDetails\";\r\n\r\nconst App = function App() {\r\n  const [pokemonList, setPokemonList] = useState(null);\r\n  const [selectedPokemon, setSelectedPokemon] = useState(null);\r\n  const [selectedAbility, setSelectedAbility] = useState(null);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [pokemonArr, setPokemonArr] = useState([]);\r\n  const [index, setIndex] = useState(0);\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  useEffect(() => {\r\n    getData(POKE_API + \"pokemon/?limit=20\", setPokemonList);\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/Pokedex/details\">\r\n            <PokemonDetails pokemon={selectedPokemon} />\r\n          </Route>\r\n          <Route path=\"/Pokedex/ability\">\r\n            <div>\r\n              <AbilitiesDetails ability={selectedAbility} />\r\n            </div>\r\n          </Route>\r\n          <Route path=\"/Pokedex\">\r\n            {isSearching ? (<button className={\"back-search\"} onClick={() => {\r\n              setIsSearching(false);\r\n              getData(POKE_API + \"pokemon/?limit=20\", setPokemonList);\r\n            }}>Back</button>) : (<span></span>)}\r\n            <input\r\n              className={\"searchInput\"}\r\n              type=\"text\"\r\n              onChange={(e) => {\r\n                setSearchQuery(e.target.value);\r\n              }}\r\n            />{\" \"}\r\n            <button\r\n              className={\"searchButton\"}\r\n              onClick={async () => {\r\n                setIsSearching(true);\r\n                var tempPokemonArr = searchPokemon(searchQuery);\r\n                setPokemonArr(tempPokemonArr);\r\n                if (tempPokemonArr[0] !== undefined) {\r\n                  var pokemonData = {\r\n                    results: tempPokemonArr[0],\r\n                    previous: null,\r\n                    next: tempPokemonArr[1],\r\n                  };\r\n                  setPokemonList(pokemonData);\r\n                } else {\r\n                  alert(\"No results!\");\r\n                }\r\n              }}\r\n            >\r\n              Search\r\n            </button>\r\n            {!pokemonList ? (\r\n              <div>Loading...</div>\r\n            ) : (\r\n              <React.Fragment>\r\n                <div className=\"grid-container\">\r\n                  <React.Fragment>\r\n                    <PokemonList\r\n                      pokemonList={pokemonList}\r\n                      setSelectedPokemon={setSelectedPokemon}\r\n                      setSelectedAbility={setSelectedAbility}\r\n                    />\r\n                  </React.Fragment>\r\n                  <br />\r\n                </div>\r\n                <button\r\n                  className=\"cycleButton\"\r\n                  disabled={\r\n                    pokemonList.previous === null ||\r\n                    pokemonList.previous === undefined\r\n                  }\r\n                  onClick={() => {\r\n                    if (pokemonList.previous instanceof Array) {\r\n                      setIndex(index - 1);\r\n                      var newPokemonList = {\r\n                        results: pokemonList.previous,\r\n                        previous: pokemonArr[index - 2],\r\n                        next: pokemonList.results,\r\n                      };\r\n                      setPokemonList(newPokemonList);\r\n                    } else {\r\n                      getData(pokemonList.previous, setPokemonList);\r\n                    }\r\n                  }}\r\n                >\r\n                  Prev\r\n                </button>\r\n                <button\r\n                  className=\"cycleButton\"\r\n                  disabled={\r\n                    pokemonList.next === null || pokemonList.next === undefined\r\n                  }\r\n                  onClick={() => {\r\n                    if (pokemonList.next instanceof Array) {\r\n                      console.log(\"test\")\r\n                      setIndex(index + 1);\r\n                      var newPokemonList = {\r\n                        results: pokemonList.next,\r\n                        previous: pokemonList.results,\r\n                        next: pokemonArr[index + 2],\r\n                      };\r\n                      setPokemonList(newPokemonList);\r\n                    } else {\r\n                      getData(pokemonList.next, setPokemonList);\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </button>\r\n              </React.Fragment>\r\n            )}\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}