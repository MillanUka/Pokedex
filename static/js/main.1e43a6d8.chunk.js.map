{"version":3,"sources":["Constants.js","Components/Types.js","Components/Abilities.js","Components/PokemonCard.js","Components/PokemonList.js","Components/Stats.js","Components/PokemonDetails.js","Components/AbilityDetails.js","App.js","serviceWorker.js","index.js"],"names":["getData","url","setFunction","a","fetch","then","response","status","alert","json","data","catch","err","console","log","Types","props","types","map","index","type","typeName","name","toUpperCase","substring","Fragment","key","className","style","fontSize","Abilities","abilities","setSelectedAbility","ability","abilityName","to","onClick","PokemonCard","setSelectedPokemon","useState","pokemon","setPokemon","useEffect","id","src","sprites","other","front_default","alt","width","height","weight","PokemonList","pokemonList","results","Stats","stats","stat","statName","base_stat","PokemonDetails","abilityData","setAbilityData","flavor_text_entries","flavor_text","App","setPokemonList","selectedPokemon","selectedAbility","POKE_API","path","disabled","previous","next","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1e43a6d8.chunk.js","sourcesContent":["export const POKE_API = \"https://pokeapi.co/api/v2/\";\r\nexport async function getData(url, setFunction) {\r\n    await fetch(url)\r\n      .then(\r\n        async function (response) {\r\n          if (response.status !== 200) {\r\n            alert('Looks like there was a problem. Status Code: ' +\r\n              response.status);\r\n            return;\r\n          }\r\n          \r\n          await response.json().then(function (data) {\r\n            setFunction(data);\r\n          });\r\n        }\r\n      )\r\n      .catch(function (err) {\r\n        console.log(\"There was a problem\")\r\n      });\r\n  }\r\n\r\n  export async function removePunctuation(originalString) {\r\n\r\n  }","import React from \"react\";\r\nexport default function Types(props) {\r\n  const { types } = props;\r\n  return (\r\n    <div>\r\n      {types.map(({ type }, index) => {\r\n        var typeName = type.name[0].toUpperCase() + type.name.substring(1);\r\n        return (\r\n          <React.Fragment key={index}>\r\n            <div className={typeName} style={{ fontSize: \"22px\" }}>\r\n              {typeName}\r\n            </div>\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default function Abilities(props) {\r\n  const { abilities, setSelectedAbility } = props;\r\n  return (\r\n    <div>\r\n      {abilities.map(({ ability }, index) => {\r\n        var abilityName =\r\n          ability.name[0].toUpperCase() + ability.name.substring(1);\r\n        return (\r\n          <React.Fragment key={index}>\r\n            <Link to={\"/Pokedex/ability/\" + ability.name} onClick={() => {\r\n                setSelectedAbility(ability);\r\n            }}>\r\n              <div className=\"ability\">{abilityName}</div>\r\n            </Link>\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import { getData } from \"../Constants\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./PokemonCard.css\";\r\nimport Types from \"./Types\";\r\nimport Abilities from \"./Abilities\";\r\nexport default function PokemonCard(props) {\r\n  const { setSelectedPokemon, setSelectedAbility } = props;\r\n  const [pokemon, setPokemon] = useState(null);\r\n  useEffect(() => {\r\n    getData(props.pokemon.url, setPokemon);\r\n  }, []);\r\n  return (\r\n    <React.Fragment>\r\n      {!pokemon ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        <div className=\"card\">\r\n          <Link\r\n            to={\"/Pokedex/details/\" + pokemon.id}\r\n            onClick={() => {\r\n              setSelectedPokemon(pokemon);\r\n            }}\r\n          >\r\n            <h1>\r\n              {\" \"}\r\n              #\r\n              {pokemon.id +\r\n                \" \" +\r\n                pokemon.name[0].toUpperCase() +\r\n                pokemon.name.substring(1)}\r\n            </h1>\r\n            <div className=\"portraitImage\">\r\n              <img\r\n                src={pokemon.sprites.other[\"official-artwork\"].front_default}\r\n                alt={\"An image of \" + pokemon.name}\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n              />{\" \"}\r\n            </div>\r\n          </Link>\r\n          <Types types={pokemon.types} />\r\n          <Abilities abilities={pokemon.abilities} setSelectedAbility={setSelectedAbility}/>\r\n          <div style={{ fontSize: \"22px\" }}>\r\n            Height: {pokemon.height / 10}m\r\n            <br />\r\n            Weight: {pokemon.weight / 10}kg\r\n          </div>\r\n          \r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PokemonCard from \"./PokemonCard\";\r\nimport \"../index.css\";\r\nexport function PokemonList(props) {\r\n  const { pokemonList, setSelectedPokemon, setSelectedAbility } = props;\r\n  var results = pokemonList.results;\r\n  if (results != null) {\r\n    return results.map(({ pokemon }, index) => {\r\n      return (\r\n        <React.Fragment key={results[index].name}>\r\n          <PokemonCard pokemon={results[index]} setSelectedPokemon={setSelectedPokemon} setSelectedAbility={setSelectedAbility}/>\r\n        </React.Fragment>\r\n      );\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nexport default function Stats(props) {\r\n  const { stats } = props;\r\n  console.log(stats)\r\n  return (\r\n    <div>\r\n      {stats.map(({ stat }, index) => {\r\n        var statName = stat.name[0].toUpperCase() + stat.name.substring(1);\r\n        console.log(stat)\r\n        return (\r\n          <React.Fragment key={index}>\r\n            <div style={{ fontSize: \"22px\" }}>\r\n              {statName}: {stats[index].base_stat}\r\n            </div>\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n\r\n}\r\n","import React from \"react\";\r\nimport Types from \"./Types\";\r\nimport \"./PokemonDetails.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Stats from \"./Stats\";\r\nexport default function PokemonDetails(props) {\r\n  const { pokemon } = props;\r\n  return (\r\n    <div className={\"content\"}>\r\n      <Link to={\"/Pokedex\"}>\r\n        <div>\r\n        Back\r\n        </div>\r\n      </Link>\r\n      <div className={\"pokemonDetails\"}>\r\n        <h1>\r\n          {\" \"}\r\n          #\r\n          {pokemon.id +\r\n            \" \" +\r\n            pokemon.name[0].toUpperCase() +\r\n            pokemon.name.substring(1)}\r\n        </h1>\r\n        <div className=\"portraitImage\">\r\n          <img\r\n            src={pokemon.sprites.other[\"official-artwork\"].front_default}\r\n            alt={\"An image of \" + pokemon.name}\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n          />{\" \"}\r\n        </div>\r\n        <br />\r\n        <Types types={pokemon.types} />\r\n        <br />\r\n        <div className={\"details\"}>\r\n          Height: {pokemon.height / 10}m<br />\r\n          Weight: {pokemon.weight / 10}kg\r\n          <br />\r\n        </div>\r\n        <div className={\"stats\"}>\r\n        <Stats stats={pokemon.stats}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./AbilityDetails.css\";\r\nimport { getData } from \"../Constants\";\r\nexport default function Abilities(props) {\r\n  const { ability } = props;\r\n  const [abilityData, setAbilityData] = useState(null);\r\n  useEffect(() => {\r\n    getData(ability.url, setAbilityData);\r\n  }, []);\r\n  return (\r\n    <div className={\"content\"}>\r\n      <Link to={\"/Pokedex\"}>\r\n        <div>Back</div>\r\n      </Link>\r\n      <div className={\"abilityDetails\"}>\r\n        <h1>{ability.name[0].toUpperCase() + ability.name.substring(1)}</h1>\r\n        {!abilityData ? (\r\n          <div>Loading...</div>\r\n        ) : (\r\n          <div>\r\n            {abilityData.flavor_text_entries[0].flavor_text}\r\n            <div className={\"pokemonList\"}>\r\n              <h3>Pokemon with {ability.name}</h3>\r\n              <table>\r\n                <tr>\r\n                  <th>Number</th>\r\n                  <th>Name</th>\r\n                </tr>\r\n                {abilityData.pokemon.map(({ pokemon }, index) => {\r\n                  return (\r\n                    <React.Fragment key={abilityData.pokemon[index].name}>\r\n                      <tr>\r\n                        <td>{index + 1}</td>\r\n                        <td>{abilityData.pokemon[index].pokemon.name[0].toUpperCase() + abilityData.pokemon[index].pokemon.name.substring(1)}</td>\r\n                      </tr>\r\n                    </React.Fragment>\r\n                  );\r\n                })}\r\n              </table>\r\n              <br />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { POKE_API, getData } from \"./Constants\";\r\nimport { PokemonList } from \"./Components/PokemonList\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport PokemonDetails from \"./Components/PokemonDetails\";\r\nimport AbilitiesDetails from \"./Components/AbilityDetails\";\r\nconst App = function App() {\r\n  const [pokemonList, setPokemonList] = useState(null);\r\n  const [selectedPokemon, setSelectedPokemon] = useState(null);\r\n  const [selectedAbility, setSelectedAbility] = useState(null);\r\n  useEffect(() => {\r\n    getData(POKE_API + \"pokemon\", setPokemonList);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/Pokedex/details\">\r\n            <PokemonDetails pokemon={selectedPokemon} />\r\n          </Route>\r\n          <Route path=\"/Pokedex/ability\">\r\n            <div>\r\n              <AbilitiesDetails ability={selectedAbility}/>\r\n            </div>\r\n          </Route>\r\n          <Route path=\"/Pokedex\">\r\n            {!pokemonList ? (\r\n              <div>Loading...</div>\r\n            ) : (\r\n              <React.Fragment>\r\n                <div className=\"grid-container\">\r\n                  <React.Fragment>\r\n                    <PokemonList pokemonList={pokemonList} setSelectedPokemon={setSelectedPokemon} setSelectedAbility={setSelectedAbility}/>\r\n                  </React.Fragment>\r\n                  <br />\r\n                </div>\r\n                <button\r\n                  className=\"prevButton\"\r\n                  disabled={pokemonList.previous == null}\r\n                  onClick={() => getData(pokemonList.previous, setPokemonList)}\r\n                >\r\n                  Prev\r\n                </button>\r\n                <button\r\n                  className=\"nextButton\"\r\n                  disabled={pokemonList.next == null}\r\n                  onClick={() => getData(pokemonList.next, setPokemonList)}\r\n                >\r\n                  Next\r\n                </button>\r\n              </React.Fragment>\r\n            )}\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}